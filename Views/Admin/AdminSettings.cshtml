@model SettingsFormModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AdminPanel</title>
    <link rel="stylesheet" href="/css/admin/adminDashboard.css" type="text/css">
</head>
<body>
    <section class="adminPage">
        <aside class="adminBar">
            <a href="/Admin/AdminSettings">Settings</a>
            <a href="/Admin/Events">Events</a>
            <a href="/Admin/Tickets">Tickets</a>
            <a href="/Admin/Users">Users</a>
            <a href="/Admin/Scanner">Scanner</a>
            <a href="/Admin/Registration">Registration</a>
            <a href="/Admin/CheckIn">CheckIn</a>
            <a href="/Admin/Analytics">Analytics</a>
        </aside>

        <section class="admin">
            <h1>Connect with:</h1>

            <section class="adminSettings">
                <form asp-action="AdminSettings" asp-controller="Admin" method="post">
                    <div class="form-group">
                        <label for="maskedTokenInput">Current Token:</label>
                        <input asp-for="TitoSettings.Token" type="text" id="maskedTokenInput" class="form-control" readonly />
                        <button type="button" id="loginWithTitoBtn">Update ti.to token</button>
                    </div>

                    @if (Model.TitoSettings?.Authenticate?.Accounts != null)
                    {
                        <div class="form-group">
                            <label asp-for="TitoSettings.Authenticate.SelectedAccount">Select Account:</label>
                            <select asp-for="TitoSettings.Authenticate.SelectedAccount" id="accountDropdown" class="form-control">                               
                                @if (Model.TitoSettings.Authenticate.SelectedAccount == null)
                                {
                                    <option value="">Select an account</option>
                                }
                                @foreach (var account in Model.TitoSettings.Authenticate?.Accounts)
                                {
                                    <option value="@account">@account</option>
                                }
                            </select>
                            <span asp-validation-for="TitoSettings.Authenticate.SelectedAccount" class="small text-danger"></span>
                        </div>
                    }

                    <button type="submit" class="btn btn-primary">Save Settings</button>
                </form>
            </section>
        </section>

        <div id="titoModel" class="model">
            <div class="model-content">
                <span class="close">&times;</span>
                <h2>Enter Tito Token</h2>
                <form id="titoForm" method="post" type="multipart/form-data">
                    <section class="adminSettings">
                        <div class="form-group">
                            <input id="titoTokenInput" asp-for="TitoSettings.Token" type="password" class="form-control" value="TitoSettings.Token">
                            <span asp-validation-for="TitoSettings.Token" class="small text-danger"></span>
                            <input type="button" id="titoSubmitButton" value="Update">
                            <div id="errorMessage" class="small text-danger"></div>
                        </div>
                    </section>
                </form>
                <div id="error-message" class="small text-danger"></div>
            </div>
        </div>
    </section>
    <script>
        var model = document.getElementById("titoModel");
        var btn = document.getElementById("loginWithTitoBtn");
        var span = document.getElementsByClassName("close")[0];
        var form = document.getElementById("titoForm");
        var errorMessage = document.getElementById("error-message");

        btn.onclick = function () {
            model.style.display = "block";
        }

        span.onclick = function () {
            model.style.display = "none";
        }

        window.onclick = function (event) {
            if (event.target == model) {
                model.style.display = "none";
            }
        }

        document.getElementById('titoSubmitButton').onclick = connectToTito;
        document.getElementById('updateAccount').onclick = updateCustomerTitoAccounts;

        async function connectToTito(event) {
            debugger;
            event.preventDefault();
            const errorMessage = document.getElementById("errorMessage");

            try {
                const response = await fetch('/Tito/Connect', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ Token: @Model.TitoSettings.Token, IsRevoked: false })
                });

                if (response.ok) {
                    window.location.href = '/Admin/AdminSettings';
                } else {
                    const result = await response.json();
                    errorMessage.textContent = result.error || "Please try with a valid token.";
                }
            } catch (error) {
                errorMessage.textContent = "An error occurred. Please try again.";
            }
        }

        async function updateCustomerTitoAccounts(event) {
            debugger;
            event.preventDefault();
            const token = '@Model.TitoSettings.Token';
            const errorMessage = document.getElementById("errorMessage");

            try {
                const response = await fetch('/Tito/Connect', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ Token: token, IsRevoked: true })
                });

                if (response.ok) {
                    window.location.href = '/Admin/AdminSettings';
                } else {
                    const result = await response.json();
                    errorMessage.textContent = result.error || "Connection problem.";
                }
            } catch (error) {
                errorMessage.textContent = "An error occurred. Please try again.";
            }
        }

    </script>
</body>
</html>
