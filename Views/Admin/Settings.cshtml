@model SettingsFormModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/settings.css" type="text/css">

    <title>Settings</title>
</head>
<body>
    <section class="settings">
        <form method="post" type="multipart/form-data">
            <section class="titoSettings">
                <div class="form-group">
                    <label asp-for="CheckInListId">CheckInNumber</label>
                    <input asp-for="CheckInListId" class="form-control">
                    <span asp-validation-for="CheckInListId" class="small text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="TiToToken">Token</label>
                    <input asp-for="TiToToken" class="form-control">
                    <span asp-validation-for="TiToToken" class="small text-danger"></span>
                </div>

                <div>
                    <input type="hidden" asp-for="SelectedCameraId" id="selectedCameraId">
                    <input type="hidden" asp-for="SelectedCameraLabel" id="selectedCameraLabel">
                </div>
            </section>

            <section class="printerSettings">
                <div>
                    @* <h1>Select a Printer:</h1>
                    <select asp-for="PrinterName" id="printerList" class="form-control">
                    <option value="" selected>Select Printer</option>
                    </select>
                    <span asp-validation-for="PrinterName" class="small text-danger"></span> *@
                    <label>Printer Settings</label>
                    <button id="printer">Printer Settings</button>
                </div>
            </section>

            <section class="selectCamera">
                <section class="selectCameraBtn">
                    <label asp-for="SelectedCameraId">Select Camera</label>
                    <select asp-for="SelectedCameraId" id="cameraSelect" class="form-control">
                        <option value="" selected>Select Camera</option>
                    </select>
                    <button type="button" onclick="startCamera()">Test Camera</button>
                    <span asp-validation-for="SelectedCameraId" class="small text-danger"></span>
                </section>
                <section class="videoSection">
                    <video class="cameraPreview" id="cameraPreview" autoplay></video>
                </section>
            </section>
            <button id="save" type="submit">Save</button>
        </form>
    </section>
    @* test *@
   @*  <div id="cameraId"></div> *@

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            populateCameraList();
            //discoverPrinters();
            printerSettings();
        });

        function printerSettings() {
            document.getElementById('printer').addEventListener('click', function () {
                event.preventDefault();
                window.print();
            })
        }

        function populateCameraList() {
            var select = document.getElementById("cameraSelect");

            navigator.mediaDevices.getUserMedia({ video: true })
                .then(stream => {
                    navigator.mediaDevices.enumerateDevices()
                        .then(devices => {
                            devices.forEach(device => {
                                if (device.kind === "videoinput") {
                                    var option = document.createElement('option');
                                    option.text = device.label + ' Id:' + device.deviceId || 'Camera ' + (select.length + 1)
                                    option.value = device.deviceId;
                                    select.appendChild(option);
                                }
                            });
                        })
                        .catch(error => {
                            console.error('Error getting media devices:', error);
                        })
                        .finally(() => {
                            stream.getTracks().forEach(track => track.stop());
                        });
                })
                .catch(error => {
                    console.error('Error accessing camera:', error);
                });
        }

        // Function to start the selected camera and update SelectedCameraId
        function startCamera() {
            var cameraSelect = document.getElementById("cameraSelect");
            var selectedCameraId = cameraSelect.value;
            var selectedCameraLabel = cameraSelect.options[cameraSelect.selectedIndex].text;
            var constraints = { video: { deviceId: selectedCameraId } };

            //test
            // var el = document.getElementById('cameraId');
            // var newEl = document.createElement('span');
            // newEl.textContent = JSON.stringify(constraints);
            // el.appendChild(newEl);

            navigator.mediaDevices.getUserMedia(constraints)
                .then(stream => {
                    var video = document.getElementById("cameraPreview");
                    video.srcObject = stream;

                    // Update SelectedCameraId
                    document.getElementById("selectedCameraId").value = selectedCameraId;
                    document.getElementById("selectedCameraLabel").value = selectedCameraLabel;
                })
                .catch(error => {
                    console.error('Error accessing camera:', error);
                });
        }

        // Discover printers
        // function discoverPrinters() {
        //     fetch('/Printer/GetPrinters')
        //         .then(response => response.json())
        //         .then(printers => {
        //             const printerSelect = document.getElementById('printerList');
        //             printers.forEach(printer => {
        //                 var option = document.createElement('option');
        //                 option.text = printer
        //                 option.value = printer;
        //                 printerSelect.appendChild(option);
        //             });
        //         })
        //         .catch(error => console.error('Failed to fetch printers', error));
        // }

        // async function discoverPrinters() {
        //     const printerList = document.getElementById('printerList');

        //     try {
        //         // Discover USB printers
        //         const usbDevices = await navigator.usb.getDevices();
        //         usbDevices.forEach(device => {
        //             const listItem = document.createElement('li');
        //             listItem.textContent = `USB Printer: ${device.productName}`;
        //             printerList.appendChild(listItem);
        //         });
        //     } catch (error) {
        //         console.error('Error discovering USB printers:', error);
        //     }

        //     try {
        //         const devices = await navigator.bluetooth.requestDevice({ acceptAllDevices: true });
        //         devices.forEach(device => {
        //             const listItem = document.createElement('li');
        //             listItem.textContent = `Bluetooth Printer: ${device.name}`;
        //             printerList.appendChild(listItem);
        //         });
        //     } catch (error) {
        //         console.error('Error discovering Bluetooth printers:', error);
        //     }
        // }
    </script>
</body>
</html>
