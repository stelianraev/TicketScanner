@model SettingsFormModel
@using CheckIN.Data.Model
@using Microsoft.AspNetCore.Identity

@inject UserManager<User> UserManager

@{
    var user = await UserManager.GetUserAsync(User);
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/settings.css" type="text/css">
    <title>Settings</title>
</head>
<body>   

    @if (user!.Permision == Permission.Admin)
    {
     <aside class="adminBar">
         <a href="/Admin/AdminSettings">Settings</a>
         <a href="/Admin/Events">Events</a>
         <a href="/Admin/Tickets">Tickets</a>
         <a href="/Admin/Users">Users</a>
         <a href="/Admin/Scanner">Scanner</a>
         <a href="/Admin/Registration">Registration</a>
         <a href="/Admin/CheckIn">CheckIn</a>
         <a href="/Admin/Analytics">Analytics</a>
     </aside>
    }

    <section class="settings">
        <form id="settingsForm" method="post">
            <section class="userDeviceSettings">
                <div>
                    <input type="hidden" asp-for="SelectedCameraId" id="selectedCameraId">
                    <input type="hidden" asp-for="SelectedCameraLabel" id="selectedCameraLabel">
                </div>
            </section>

            <section class="printerSettings">
                <div>
                    <label>Printer Settings</label>
                    <button id="printer">Printer Settings</button>
                </div>
            </section>

            <section class="selectCamera">
                <section class="selectCameraBtn">
                    <label asp-for="SelectedCameraId">Select Camera</label>
                    <select asp-for="SelectedCameraId" id="cameraSelect" class="form-control">
                        <option value="" selected>Select Camera</option>
                    </select>
                    <button type="button" onclick="startCamera()">Test Camera</button>
                    <span asp-validation-for="SelectedCameraId" class="small text-danger"></span>
                </section>
                <section class="videoSection">
                    <video class="cameraPreview" id="cameraPreview" autoplay></video>
                </section>
            </section>
            <button id="save" type="submit">Save</button>
        </form>
    </section>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            populateCameraList();
            printerSettings();
            attachFormSubmitHandler();
        });

        function printerSettings() {
            document.getElementById('printer').addEventListener('click', function (event) {
                event.preventDefault();
                window.print();
            });
        }

        function populateCameraList() {
            var select = document.getElementById("cameraSelect");

            navigator.mediaDevices.getUserMedia({ video: true })
                .then(stream => {
                    navigator.mediaDevices.enumerateDevices()
                        .then(devices => {
                            devices.forEach(device => {
                                if (device.kind === "videoinput") {
                                    var option = document.createElement('option');
                                    option.text = device.label + ' Id:' + device.deviceId || 'Camera ' + (select.length + 1);
                                    option.value = device.deviceId;
                                    select.appendChild(option);
                                }
                            });
                        })
                        .catch(error => {
                            console.error('Error getting media devices:', error);
                        })
                        .finally(() => {
                            stream.getTracks().forEach(track => track.stop());
                        });
                })
                .catch(error => {
                    console.error('Error accessing camera:', error);
                });
        }

        function startCamera() {
            var cameraSelect = document.getElementById("cameraSelect");
            var selectedCameraId = cameraSelect.value;
            var selectedCameraLabel = cameraSelect.options[cameraSelect.selectedIndex].text;
            var constraints = { video: { deviceId: selectedCameraId } };

            navigator.mediaDevices.getUserMedia(constraints)
                .then(stream => {
                    var video = document.getElementById("cameraPreview");
                    video.srcObject = stream;

                    // Update SelectedCameraId
                    document.getElementById("selectedCameraId").value = selectedCameraId;
                    document.getElementById("selectedCameraLabel").value = selectedCameraLabel;
                })
                .catch(error => {
                    console.error('Error accessing camera:', error);
                });
        }

        function attachFormSubmitHandler() {
            var form = document.getElementById('settingsForm');
            form.addEventListener('submit', function (event) {
                var cameraSelect = document.getElementById("cameraSelect");
                var selectedCameraId = cameraSelect.value;
                var selectedCameraLabel = cameraSelect.options[cameraSelect.selectedIndex].text;

                document.getElementById("selectedCameraId").value = selectedCameraId;
                document.getElementById("selectedCameraLabel").value = selectedCameraLabel;
            });
        }
    </script>
</body>
</html>
